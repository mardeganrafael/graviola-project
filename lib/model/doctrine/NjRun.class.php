<?php

/**
 * NjRun
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    graviola
 * @subpackage model
 * @author     Felipe Vieira         <nvieirafelipe@gmail.com>;
               Jean Frizo            <jfrizo@gmail.com>;
               Rafael Mardegan       <mardegan.rafael@gmail.com>;
               Yohan AraÃºjo          <yohanaraujo07@gmail.com>;
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class NjRun extends BaseNjRun
{
  /**
   * This overrides the save method. When saving a NjRun create or update an NjEstimatedArrivalTime.
   * 
   * @param Doctrine_Connection $con
   * @return void 
   */
  public function save(Doctrine_Connection $con = null)
  {
    // Retrieve the NjStopTime of the current NjRun (first NjStopTime).
    $stop_time = Doctrine_Core::getTable('NjStopTime')->getNjStopTime($this->getNjTripId(), $this->getNjStopId());
    // Retrieve the next NjStopTime of the $stop_time.
    $next_stop_times = Doctrine_Core::getTable('NjStopTime')->getNextNjStopTimes($stop_time->getNjTripId(), $stop_time->getStopSequence());
    
    // For each NjStopTime in $next_stop_times create or update an NjEstimatedArrivalTime.
    foreach($next_stop_times as $next_stop_time) 
    {
      // Retrieve existing NjEstimatedArrivalTime for the NjStop in current NjStopTime.
      $estimatedArrivalTime = Doctrine_Core::getTable('NjEstimatedArrivalTime')->getNjEstimatedArrivalTime($next_stop_time->getNjTripId(), $next_stop_time->getNjStopId());
      
      // If NjEstimatedArrivalTime does not exist create a new one.
      if(!$estimatedArrivalTime)
      {
        $estimatedArrivalTime = new NjEstimatedArrivalTime();
        $estimatedArrivalTime->setNjTripId($next_stop_time->getNjTripId());
        $estimatedArrivalTime->setNjStopId($next_stop_time->getNjStopId());
      }
      // Get the time it takes from the NjStop of the first NjStopTime to the NjStop of the current NjStopTime.
      $time_between_stops = abs(strtotime($stop_time->getDepartureTime()) - strtotime($next_stop_time->getArrivalTime()));

      // Get the real time of departure from the NjRun.
      $run_departure_time = strtotime($this->getCreatedAt());
      
      // Sum the real time of departure with the diference between stops to get the estimated time.
      $estimatedArrivalTime->setArrivalTime(date('G:i:s', $run_departure_time+$time_between_stops));

      // Because dates are being shaped by NjDataSimulation, we need the next two lines to keep the logic. The creation date of the NjRun, must be equal to the NjEstimatedArrivalTime correspondent.
      $estimatedArrivalTime->setCreatedAt($this->getCreatedAt());
      $estimatedArrivalTime->setUpdatedAt($this->getUpdatedAt());
      $estimatedArrivalTime->save();
    }
    
    return parent::save($con);
  }
}